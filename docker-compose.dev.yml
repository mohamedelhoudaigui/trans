
# ======================================================================================
# VOLUMES
# ======================================================================================

volumes:
  backend_code_volume:
    name: ${PROJECT_NAME}_backend_code_volume
    driver: local
    driver_opts:
      o: bind
      device: ./backend
      type: none
  grafana_volume:
    name: ${PROJECT_NAME}_grafana_volume
    driver: local
    driver_opts:
      o: bind
      device: ./devops/external-volumes/grafana
      type: none
  prometheus_volume:
    name: ${PROJECT_NAME}_prometheus_volume
    driver: local
    driver_opts:
      o: bind
      device: ./devops/external-volumes/prometheus
      type: none
  sqlite_data:
    name: ${PROJECT_NAME}_sqlite_data
    driver: local
  elasticsearch_data:
    name: ${PROJECT_NAME}_elasticsearch_data
    driver: local
  cadvisor_data:
    name: ${PROJECT_NAME}_cadvisor_data
    driver: local

# ======================================================================================
# NETWORKS
# ======================================================================================

networks:
  backend:
    driver: bridge
  devops:
    driver: bridge

# ======================================================================================
# SERVICES
# ======================================================================================

services:
  # Backend Service
  backend:
    container_name: ${PROJECT_NAME}_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - backend_code_volume:/usr/src/app
      - /usr/src/app/node_modules
      - sqlite_data:/dbdata
    networks:
      - backend
      - devops
    env_file:
      - ./backend/.env
    environment:
      - PROMETHEUS_METRICS_PATH=/metrics # For Prometheus scraping
      - SWAGGER_HOST=0.0.0.0
      - SWAGGER_PORT=3000
    ports:
      - "${FASTIFY_HOST_PORT:-3000}:3000"
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
        tag: "{{.Name}}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service
  frontend:
    container_name: ${PROJECT_NAME}_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_HOST_PORT:-8080}:3000"
    networks:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    depends_on:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"

  # Dockge Service
  dockge:
    container_name: ${PROJECT_NAME}_dockge
    image: louislam/dockge:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./devops/external-volumes/dockge:/app/data
    ports:
      - "${DOCKGE_HOST_PORT:-5001}:5001"
    networks:
      - devops
    environment:
      - DOCKGE_STACKS_DIR=/app/data/stacks
      - DOCKGE_ENABLE_CONSOLE=${DOCKGE_ENABLE_CONSOLE:-true}
    restart: unless-stopped

  # Prometheus Service
  prometheus:
    container_name: ${PROJECT_NAME}_prometheus
    image: prom/prometheus:${PROMETHEUS_IMAGE_TAG:-v2.54.1}
    volumes:
      - ./devops/configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_volume:/prometheus
    networks:
      - devops
      - backend
    ports:
      - "0.0.0.0:${PROMETHEUS_HOST_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - backend
      - cadvisor
    restart: unless-stopped

  # Grafana Service
  grafana:
    container_name: ${PROJECT_NAME}_grafana
    image: grafana/grafana-oss:${GRAFANA_IMAGE_TAG:-11.2.0}
    user: "0"
    volumes:
      - grafana_volume:/var/lib/grafana
      - ./devops/configs/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - devops
    ports:
      - "0.0.0.0:${GRAFANA_HOST_PORT:-3001}:3000"
    environment:
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_HOST_PORT:-3001}
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=${GF_PLUGINS_PREINSTALL:-grafana-clock-panel}
      - GF_LOG_LEVEL=${LOG_LEVEL:-info}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASS:-admin}
    depends_on:
      - prometheus
    restart: unless-stopped

  # cAdvisor Service
  cadvisor:
    container_name: ${PROJECT_NAME}_cadvisor
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_IMAGE_TAG:-v0.50.0}
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - cadvisor_data:/cadvisor/storage
    networks:
      - devops
    ports:
      - "${CADVISOR_HOST_PORT:-8081}:8080"
    command:
      - "--storage_driver=overlayfs"
      - "--housekeeping_interval=30s"
    restart: unless-stopped
    depends_on:
      - backend
    privileged: true # Required for cAdvisor to access system metrics

  # Elasticsearch Service
  elasticsearch:
    container_name: ${PROJECT_NAME}_elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION:-8.15.0}
    environment:
      - node.name=es01_chimera
      - cluster.name=chimera-elk-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=${ES_JAVA_OPTS:-Xms512m -Xmx512m}"
      - xpack.security.enabled=${ELASTICSEARCH_DISABLE_SECURITY:-false}
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile: { soft: 65535, hard: 65535 }
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_HOST_PORT_HTTP:-9200}:9200"
      - "${ELASTICSEARCH_HOST_PORT_TRANSPORT:-9300}:9300"
    networks:
      - devops
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -s --fail http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Logstash Service
  logstash:
    container_name: ${PROJECT_NAME}_logstash
    image: docker.elastic.co/logstash/logstash:${ELASTIC_VERSION:-8.15.0}
    volumes:
      - ./devops/configs/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./devops/configs/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
    networks:
      - devops
    environment:
      LS_JAVA_OPTS: "${LS_JAVA_OPTS:-Xms256m -Xmx256m}"
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Kibana Service
  kibana:
    container_name: ${PROJECT_NAME}_kibana
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION:-8.15.0}
    volumes:
      - ./devops/configs/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "${KIBANA_HOST_PORT:-5601}:5601"
    networks:
      - devops
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
    depends_on:
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped

  # Filebeat Service
  filebeat:
    container_name: ${PROJECT_NAME}_filebeat
    image: docker.elastic.co/beats/filebeat:${ELASTIC_VERSION:-8.15.0}
    user: root
    volumes:
      - ./devops/configs/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - devops
      - backend
    command: ["--strict.perms=false"]
    depends_on:
      - logstash
    restart: unless-stopped
